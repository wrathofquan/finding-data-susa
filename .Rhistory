2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , border="transparent" , xlim=c(0,5) )
1
2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , border="NONE" , xlim=c(0,5) )
1
2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , xlim=c(0,5) )
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(0.5, 4))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 20000), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 3000)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 3000)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(5, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
colors()
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "gray14", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.1), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.2), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.12, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.8, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, .5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
# generate pairs of x-y values
x1 = c(seq(0, pi, length = 50), seq(pi, 2*pi, length = 50))
y1 = cos(x1) / sin(x1)
x2 = seq(1.02 * 2 * pi + pi/2, 4*pi + pi/2, length = 50)
y2 = tan(x2)
# set graphical parameters
op = par(bg="black", mar=rep(.5,4))
# plot
plot(c(x1, x2), c(y1, y2), type = "n", ylim = c(-11, 11))
for (i in seq(-10, 10, length = 100))
{
lines(x1, y1 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
lines(x2, y2 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
}
help("read.csv")
# mandelbrot_naive.R
# "Naive" implementation of Mandelbrot Set in R
# Myles Harrison
# http://www.everydayanalytics.ca
# parameters
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
library(ggplot2)
library(ggplot2)
library("ggplot2", lib.loc="~/R/R-3.2.3/library")
library(slidify)
install.packages("slidify")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
install.packaages("install_github")
install.packages("install_github")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
library(install_github)
library(tufte)
help(tufte)
??tufter
??tufte
&nbsp;
library(slidify)
slidify("index.Rmd")
library(tufte)
library(tufte)
library(tufte)
get(wd)
getwd()
setwd("C:/Users/jquan01/Desktop/IR-Data")
getwd()
library(dplyr)
library(xml2)
setwd("~/Downloads/2005-2007-109th")
files <- list.files()
pg <- read_xml("20050311_PQCR31144.xml")
recs <- xml_find_all(pg, "//fulltext") %>% xml_text
recs
recs <- xml_find_all(pg, c("//fulltext", "//url")) %>% xml_text
recs <- xml_find_all(pg, "//fulltext", "//url") %>% xml_text
library(XML)
d <- xmlToDataFrame("20050311_PQCR31144.xml")
d <- xmlToDataFrame("20050311_PQCR31144.xml", nodes = "//fulltext")
d <- xmlToDataFrame("20050311_PQCR31144.xml", nodes = getNodeSet("//fulltext"))
d <- xmlToDataFrame("20050311_PQCR31144.xml", nodes = getNodeSet("//fulltext"))
d <- xmlToList(pg)
# load packages
library(dplyr)
library(ggplot2)
# parameters
width <- 100
height <- 100
x_spacing <- 0.5
x_noise <- 0.2
y_spacing <- 10
y_noise <- 0.01
# make reproducible
set.seed(101)
# make data frame
make_hline <- function(y, y_noise) {
lines <- data.frame(x = numeric(0), xend = numeric(0), y = numeric(0), yend = numeric(0))
Y <- y
x <- 0
y <- y
lines[1, c("x", "y")] <- c(x, y)
i <- 2
alpha <- 0
while (alpha < 2 * pi) {
x <- (Y * cos(alpha))
y <- (Y * sin(alpha))
lines[i, c("x", "y")] <- c(x, y)
lines[i - 1, c("xend", "yend")] <- c(x, y)
i <- i + 1
alpha <- alpha + 0.1 * pi / 180
}
lines[i - 1, c("xend", "yend")] <- c(width, y + runif(1, -y_noise, y_noise))
lines <- lines %>% mutate(Y = Y)
return(lines)
}
lines <- make_hline(0, 0)
for(i in seq(4, 96, by = 4)) {
lines <- lines %>% rbind(make_hline(i, y_noise))
}
lines <- lines %>% rbind(make_hline(height, 0))
lines2 <- data.frame(x = numeric(0), xend = numeric(0), y = numeric(0), yend = numeric(0))
k <- 1
for (i in seq(1, nrow(lines))) {
x1 <- lines$x[i]
y1 <- lines$y[i]
Y1 <- lines$Y[i]
temp <- lines %>% filter(Y >= Y1 - 4 & Y <= Y1 + 4, x != x1 & y != y1,
x >= x1 - 5 & x <= x1 + 5, y >= y1 - 5 & y <= y1 + 5)
temp2 <- sample_n(temp, 1)
x2 <- temp2$x[1]
y2 <- temp2$y[1]
lines2[k, c("x", "xend", "y", "yend")] <- c(x1, x2, y1, y2)
k <- k + 1
print(paste(k, " of", nrow(lines)), sep = "")
}
# Chunk 1
library(rvest)
library(dplyr)
ufo <- read_html("https://en.wikipedia.org/wiki/UFO_sightings_in_the_United_States")
ufo_date <- html_nodes(ufo,'td:nth-child(1)') %>% html_text()
ufo_date <- ufo_date[c(-1, -44)] #remove extra elements
ufo_state <- html_nodes(ufo,'td:nth-child(3)') %>% html_text()
ufo_name <- html_nodes(ufo,'td:nth-child(4)') %>% html_text()
ufo_df<-data.frame(date = ufo_date, name = ufo_name, state = ufo_state)
head(ufo_df, n =5)
iris
iris %>% summarise(avg = mean())
iris %>% summarise(avg = mean(Pedtal.Width))
iris %>% summarise(avg = mean(Petal.Width))
iris %>%  group_by(Species) %>% summarise(avg = mean(Petal.Width))
iris %>%  group_by(Species) %>% tally()
setwd("~/finding-data-susa")
library(revealjs)
